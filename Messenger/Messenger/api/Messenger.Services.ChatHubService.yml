### YamlMime:ManagedReference
items:
- uid: Messenger.Services.ChatHubService
  commentId: T:Messenger.Services.ChatHubService
  id: ChatHubService
  parent: Messenger.Services
  children:
  - Messenger.Services.ChatHubService.#ctor
  - Messenger.Services.ChatHubService.CurrentTeamId
  - Messenger.Services.ChatHubService.CurrentUser
  - Messenger.Services.ChatHubService.GetMessages
  - Messenger.Services.ChatHubService.GetTeamsList
  - Messenger.Services.ChatHubService.InvitationReceived
  - Messenger.Services.ChatHubService.InviteUser(Messenger.Models.Invitation)
  - Messenger.Services.ChatHubService.MessageReceived
  - Messenger.Services.ChatHubService.MessagesByConnectedTeam
  - Messenger.Services.ChatHubService.SendMessage(System.String)
  - Messenger.Services.ChatHubService.SwitchTeam(System.UInt32)
  - Messenger.Services.ChatHubService.TeamSwitched
  langs:
  - csharp
  - vb
  name: ChatHubService
  nameWithType: ChatHubService
  fullName: Messenger.Services.ChatHubService
  type: Class
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: ChatHubService
    path: Services/ChatHubService.cs
    startLine: 18
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nService aggregator and container class for the state management\nView models can subscribe to this service for corresponding ui events (MessageReceived, InvitationReceived, etc.)\n"
  example: []
  syntax:
    content: public class ChatHubService
    content.vb: Public Class ChatHubService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Messenger.Services.ChatHubService.MessagesByConnectedTeam
  commentId: P:Messenger.Services.ChatHubService.MessagesByConnectedTeam
  id: MessagesByConnectedTeam
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: MessagesByConnectedTeam
  nameWithType: ChatHubService.MessagesByConnectedTeam
  fullName: Messenger.Services.ChatHubService.MessagesByConnectedTeam
  type: Property
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: MessagesByConnectedTeam
    path: Services/ChatHubService.cs
    startLine: 30
  assemblies:
  - Messenger
  namespace: Messenger.Services
  syntax:
    content: public ConcurrentDictionary<uint, List<Message>> MessagesByConnectedTeam { get; }
    parameters: []
    return:
      type: System.Collections.Concurrent.ConcurrentDictionary{System.UInt32,System.Collections.Generic.List{Messenger.Core.Models.Message}}
    content.vb: Public ReadOnly Property MessagesByConnectedTeam As ConcurrentDictionary(Of UInteger, List(Of Message))
  overload: Messenger.Services.ChatHubService.MessagesByConnectedTeam*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Messenger.Services.ChatHubService.CurrentTeamId
  commentId: P:Messenger.Services.ChatHubService.CurrentTeamId
  id: CurrentTeamId
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: CurrentTeamId
  nameWithType: ChatHubService.CurrentTeamId
  fullName: Messenger.Services.ChatHubService.CurrentTeamId
  type: Property
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: CurrentTeamId
    path: Services/ChatHubService.cs
    startLine: 32
  assemblies:
  - Messenger
  namespace: Messenger.Services
  syntax:
    content: public uint? CurrentTeamId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.UInt32}
    content.vb: Public Property CurrentTeamId As UInteger?
  overload: Messenger.Services.ChatHubService.CurrentTeamId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.CurrentUser
  commentId: P:Messenger.Services.ChatHubService.CurrentUser
  id: CurrentUser
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: CurrentUser
  nameWithType: ChatHubService.CurrentUser
  fullName: Messenger.Services.ChatHubService.CurrentUser
  type: Property
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: CurrentUser
    path: Services/ChatHubService.cs
    startLine: 34
  assemblies:
  - Messenger
  namespace: Messenger.Services
  syntax:
    content: public UserViewModel CurrentUser { get; }
    parameters: []
    return:
      type: Messenger.ViewModels.UserViewModel
    content.vb: Public ReadOnly Property CurrentUser As UserViewModel
  overload: Messenger.Services.ChatHubService.CurrentUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Messenger.Services.ChatHubService.MessageReceived
  commentId: E:Messenger.Services.ChatHubService.MessageReceived
  id: MessageReceived
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: MessageReceived
  nameWithType: ChatHubService.MessageReceived
  fullName: Messenger.Services.ChatHubService.MessageReceived
  type: Event
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: MessageReceived
    path: Services/ChatHubService.cs
    startLine: 43
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nEvent handler for &quot;ReceiveMessage&quot;(SignalR)\n"
  example: []
  syntax:
    content: public event EventHandler<Message> MessageReceived
    return:
      type: System.EventHandler{Messenger.Core.Models.Message}
    content.vb: Public Event MessageReceived As EventHandler(Of Message)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.InvitationReceived
  commentId: E:Messenger.Services.ChatHubService.InvitationReceived
  id: InvitationReceived
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: InvitationReceived
  nameWithType: ChatHubService.InvitationReceived
  fullName: Messenger.Services.ChatHubService.InvitationReceived
  type: Event
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: InvitationReceived
    path: Services/ChatHubService.cs
    startLine: 48
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nEvent handler for &quot;ReceiveInvitation&quot;(SignalR)\n"
  example: []
  syntax:
    content: public event EventHandler<uint> InvitationReceived
    return:
      type: System.EventHandler{System.UInt32}
    content.vb: Public Event InvitationReceived As EventHandler(Of UInteger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.TeamSwitched
  commentId: E:Messenger.Services.ChatHubService.TeamSwitched
  id: TeamSwitched
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: TeamSwitched
  nameWithType: ChatHubService.TeamSwitched
  fullName: Messenger.Services.ChatHubService.TeamSwitched
  type: Event
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: TeamSwitched
    path: Services/ChatHubService.cs
    startLine: 53
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nEvent handler for switching teams\n"
  example: []
  syntax:
    content: public event EventHandler<IEnumerable<Message>> TeamSwitched
    return:
      type: System.EventHandler{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
    content.vb: Public Event TeamSwitched As EventHandler(Of IEnumerable(Of Message))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.#ctor
  commentId: M:Messenger.Services.ChatHubService.#ctor
  id: '#ctor'
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: ChatHubService()
  nameWithType: ChatHubService.ChatHubService()
  fullName: Messenger.Services.ChatHubService.ChatHubService()
  type: Constructor
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: .ctor
    path: Services/ChatHubService.cs
    startLine: 57
  assemblies:
  - Messenger
  namespace: Messenger.Services
  syntax:
    content: public ChatHubService()
    content.vb: Public Sub New
  overload: Messenger.Services.ChatHubService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.GetMessages
  commentId: M:Messenger.Services.ChatHubService.GetMessages
  id: GetMessages
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: GetMessages()
  nameWithType: ChatHubService.GetMessages()
  fullName: Messenger.Services.ChatHubService.GetMessages()
  type: Method
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: GetMessages
    path: Services/ChatHubService.cs
    startLine: 76
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nGets all messages of the current team\n"
  example: []
  syntax:
    content: public async Task<IEnumerable<Message>> GetMessages()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
      description: List of messages
    content.vb: Public Function GetMessages As Task(Of IEnumerable(Of Message))
  overload: Messenger.Services.ChatHubService.GetMessages*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.GetTeamsList
  commentId: M:Messenger.Services.ChatHubService.GetTeamsList
  id: GetTeamsList
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: GetTeamsList()
  nameWithType: ChatHubService.GetTeamsList()
  fullName: Messenger.Services.ChatHubService.GetTeamsList()
  type: Method
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: GetTeamsList
    path: Services/ChatHubService.cs
    startLine: 106
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nGets the list of teams of the current user\nShould only be used to &apos;reload&apos;, since the list should be already loaded in UserViewModel.Teams\n"
  example: []
  syntax:
    content: public async Task<IEnumerable<Team>> GetTeamsList()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Team}}
      description: List of teams
    content.vb: Public Function GetTeamsList As Task(Of IEnumerable(Of Team))
  overload: Messenger.Services.ChatHubService.GetTeamsList*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.SendMessage(System.String)
  commentId: M:Messenger.Services.ChatHubService.SendMessage(System.String)
  id: SendMessage(System.String)
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: SendMessage(String)
  nameWithType: ChatHubService.SendMessage(String)
  fullName: Messenger.Services.ChatHubService.SendMessage(System.String)
  type: Method
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: SendMessage
    path: Services/ChatHubService.cs
    startLine: 121
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nSends a message to the current team\n"
  example: []
  syntax:
    content: public async Task SendMessage(string content)
    parameters:
    - id: content
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: Asynchronous task to be awaited
    content.vb: Public Function SendMessage(content As String) As Task
  overload: Messenger.Services.ChatHubService.SendMessage*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.SwitchTeam(System.UInt32)
  commentId: M:Messenger.Services.ChatHubService.SwitchTeam(System.UInt32)
  id: SwitchTeam(System.UInt32)
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: SwitchTeam(UInt32)
  nameWithType: ChatHubService.SwitchTeam(UInt32)
  fullName: Messenger.Services.ChatHubService.SwitchTeam(System.UInt32)
  type: Method
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: SwitchTeam
    path: Services/ChatHubService.cs
    startLine: 139
  assemblies:
  - Messenger
  namespace: Messenger.Services
  summary: "\nUpdates current team id and invokes registered ui events\n"
  example: []
  syntax:
    content: public async Task SwitchTeam(uint teamId)
    parameters:
    - id: teamId
      type: System.UInt32
      description: Id of the team to switch to
    return:
      type: System.Threading.Tasks.Task
      description: Asynchronous task to be awaited
    content.vb: Public Function SwitchTeam(teamId As UInteger) As Task
  overload: Messenger.Services.ChatHubService.SwitchTeam*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Services.ChatHubService.InviteUser(Messenger.Models.Invitation)
  commentId: M:Messenger.Services.ChatHubService.InviteUser(Messenger.Models.Invitation)
  id: InviteUser(Messenger.Models.Invitation)
  parent: Messenger.Services.ChatHubService
  langs:
  - csharp
  - vb
  name: InviteUser(Invitation)
  nameWithType: ChatHubService.InviteUser(Invitation)
  fullName: Messenger.Services.ChatHubService.InviteUser(Messenger.Models.Invitation)
  type: Method
  source:
    remote:
      path: Messenger/Messenger/Services/ChatHubService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: InviteUser
    path: Services/ChatHubService.cs
    startLine: 146
  assemblies:
  - Messenger
  namespace: Messenger.Services
  syntax:
    content: public async Task InviteUser(Invitation invitation)
    parameters:
    - id: invitation
      type: Messenger.Models.Invitation
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function InviteUser(invitation As Invitation) As Task
  overload: Messenger.Services.ChatHubService.InviteUser*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
references:
- uid: Messenger.Services
  commentId: N:Messenger.Services
  name: Messenger.Services
  nameWithType: Messenger.Services
  fullName: Messenger.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Messenger.Services.ChatHubService.MessagesByConnectedTeam*
  commentId: Overload:Messenger.Services.ChatHubService.MessagesByConnectedTeam
  name: MessagesByConnectedTeam
  nameWithType: ChatHubService.MessagesByConnectedTeam
  fullName: Messenger.Services.ChatHubService.MessagesByConnectedTeam
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.UInt32,System.Collections.Generic.List{Messenger.Core.Models.Message}}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{System.UInt32,System.Collections.Generic.List{Messenger.Core.Models.Message}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<UInt32, List<Message>>
  nameWithType: ConcurrentDictionary<UInt32, List<Message>>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.UInt32, System.Collections.Generic.List<Messenger.Core.Models.Message>>
  nameWithType.vb: ConcurrentDictionary(Of UInt32, List(Of Message))
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.UInt32, System.Collections.Generic.List(Of Messenger.Core.Models.Message))
  name.vb: ConcurrentDictionary(Of UInt32, List(Of Message))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: Messenger.Services.ChatHubService.CurrentTeamId*
  commentId: Overload:Messenger.Services.ChatHubService.CurrentTeamId
  name: CurrentTeamId
  nameWithType: ChatHubService.CurrentTeamId
  fullName: Messenger.Services.ChatHubService.CurrentTeamId
- uid: System.Nullable{System.UInt32}
  commentId: T:System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  nameWithType.vb: Nullable(Of UInt32)
  fullName.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Services.ChatHubService.CurrentUser*
  commentId: Overload:Messenger.Services.ChatHubService.CurrentUser
  name: CurrentUser
  nameWithType: ChatHubService.CurrentUser
  fullName: Messenger.Services.ChatHubService.CurrentUser
- uid: Messenger.ViewModels.UserViewModel
  commentId: T:Messenger.ViewModels.UserViewModel
  parent: Messenger.ViewModels
  name: UserViewModel
  nameWithType: UserViewModel
  fullName: Messenger.ViewModels.UserViewModel
- uid: Messenger.ViewModels
  commentId: N:Messenger.ViewModels
  name: Messenger.ViewModels
  nameWithType: Messenger.ViewModels
  fullName: Messenger.ViewModels
- uid: System.EventHandler{Messenger.Core.Models.Message}
  commentId: T:System.EventHandler{Messenger.Core.Models.Message}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<Message>
  nameWithType: EventHandler<Message>
  fullName: System.EventHandler<Messenger.Core.Models.Message>
  nameWithType.vb: EventHandler(Of Message)
  fullName.vb: System.EventHandler(Of Messenger.Core.Models.Message)
  name.vb: EventHandler(Of Message)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{System.UInt32}
  commentId: T:System.EventHandler{System.UInt32}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<UInt32>
  nameWithType: EventHandler<UInt32>
  fullName: System.EventHandler<System.UInt32>
  nameWithType.vb: EventHandler(Of UInt32)
  fullName.vb: System.EventHandler(Of System.UInt32)
  name.vb: EventHandler(Of UInt32)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
  commentId: T:System.EventHandler{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<IEnumerable<Message>>
  nameWithType: EventHandler<IEnumerable<Message>>
  fullName: System.EventHandler<System.Collections.Generic.IEnumerable<Messenger.Core.Models.Message>>
  nameWithType.vb: EventHandler(Of IEnumerable(Of Message))
  fullName.vb: System.EventHandler(Of System.Collections.Generic.IEnumerable(Of Messenger.Core.Models.Message))
  name.vb: EventHandler(Of IEnumerable(Of Message))
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Services.ChatHubService.#ctor*
  commentId: Overload:Messenger.Services.ChatHubService.#ctor
  name: ChatHubService
  nameWithType: ChatHubService.ChatHubService
  fullName: Messenger.Services.ChatHubService.ChatHubService
- uid: Messenger.Services.ChatHubService.GetMessages*
  commentId: Overload:Messenger.Services.ChatHubService.GetMessages
  name: GetMessages
  nameWithType: ChatHubService.GetMessages
  fullName: Messenger.Services.ChatHubService.GetMessages
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<Message>>
  nameWithType: Task<IEnumerable<Message>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Messenger.Core.Models.Message>>
  nameWithType.vb: Task(Of IEnumerable(Of Message))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Messenger.Core.Models.Message))
  name.vb: Task(Of IEnumerable(Of Message))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Messenger.Services.ChatHubService.GetTeamsList*
  commentId: Overload:Messenger.Services.ChatHubService.GetTeamsList
  name: GetTeamsList
  nameWithType: ChatHubService.GetTeamsList
  fullName: Messenger.Services.ChatHubService.GetTeamsList
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Team}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Team}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<Team>>
  nameWithType: Task<IEnumerable<Team>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Messenger.Core.Models.Team>>
  nameWithType.vb: Task(Of IEnumerable(Of Team))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Messenger.Core.Models.Team))
  name.vb: Task(Of IEnumerable(Of Team))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Services.ChatHubService.SendMessage*
  commentId: Overload:Messenger.Services.ChatHubService.SendMessage
  name: SendMessage
  nameWithType: ChatHubService.SendMessage
  fullName: Messenger.Services.ChatHubService.SendMessage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Messenger.Services.ChatHubService.SwitchTeam*
  commentId: Overload:Messenger.Services.ChatHubService.SwitchTeam
  name: SwitchTeam
  nameWithType: ChatHubService.SwitchTeam
  fullName: Messenger.Services.ChatHubService.SwitchTeam
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Messenger.Services.ChatHubService.InviteUser*
  commentId: Overload:Messenger.Services.ChatHubService.InviteUser
  name: InviteUser
  nameWithType: ChatHubService.InviteUser
  fullName: Messenger.Services.ChatHubService.InviteUser
- uid: Messenger.Models.Invitation
  commentId: T:Messenger.Models.Invitation
  parent: Messenger.Models
  name: Invitation
  nameWithType: Invitation
  fullName: Messenger.Models.Invitation
- uid: Messenger.Models
  commentId: N:Messenger.Models
  name: Messenger.Models
  nameWithType: Messenger.Models
  fullName: Messenger.Models
