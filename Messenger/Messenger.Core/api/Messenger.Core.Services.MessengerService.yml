### YamlMime:ManagedReference
items:
- uid: Messenger.Core.Services.MessengerService
  commentId: T:Messenger.Core.Services.MessengerService
  id: MessengerService
  parent: Messenger.Core.Services
  children:
  - Messenger.Core.Services.MessengerService.CreateTeam(System.String,System.String,System.String)
  - Messenger.Core.Services.MessengerService.GetTeam(System.UInt32)
  - Messenger.Core.Services.MessengerService.Initialize(System.String)
  - Messenger.Core.Services.MessengerService.InviteUser(System.String,System.UInt32)
  - Messenger.Core.Services.MessengerService.LoadMessages(System.UInt32)
  - Messenger.Core.Services.MessengerService.LoadTeams(System.String)
  - Messenger.Core.Services.MessengerService.logger
  - Messenger.Core.Services.MessengerService.RegisterListenerForInvites(System.EventHandler{System.UInt32})
  - Messenger.Core.Services.MessengerService.RegisterListenerForMessages(System.EventHandler{Messenger.Core.Models.Message})
  - Messenger.Core.Services.MessengerService.SendMessage(Messenger.Core.Models.Message,System.Collections.Generic.IEnumerable{System.String})
  langs:
  - csharp
  - vb
  name: MessengerService
  nameWithType: MessengerService
  fullName: Messenger.Core.Services.MessengerService
  type: Class
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: MessengerService
    path: Services/MessengerService.cs
    startLine: 15
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nContainer service class for message service, team service and signal-r service\n"
  example: []
  syntax:
    content: public class MessengerService
    content.vb: Public Class MessengerService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Messenger.Core.Services.MessengerService.logger
  commentId: P:Messenger.Core.Services.MessengerService.logger
  id: logger
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: logger
  nameWithType: MessengerService.logger
  fullName: Messenger.Core.Services.MessengerService.logger
  type: Property
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: logger
    path: Services/MessengerService.cs
    startLine: 25
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  syntax:
    content: public ILogger logger { get; }
    parameters: []
    return:
      type: Serilog.ILogger
    content.vb: Public ReadOnly Property logger As ILogger
  overload: Messenger.Core.Services.MessengerService.logger*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Messenger.Core.Services.MessengerService.Initialize(System.String)
  commentId: M:Messenger.Core.Services.MessengerService.Initialize(System.String)
  id: Initialize(System.String)
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: Initialize(String)
  nameWithType: MessengerService.Initialize(String)
  fullName: Messenger.Core.Services.MessengerService.Initialize(System.String)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: Initialize
    path: Services/MessengerService.cs
    startLine: 33
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nConnects the given user to the teams he is a member of\n"
  example: []
  syntax:
    content: public async Task<IList<Team>> Initialize(string userId)
    parameters:
    - id: userId
      type: System.String
      description: The user to connect to his teams
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Messenger.Core.Models.Team}}
      description: List of teams the user has membership of, null if none exists
    content.vb: Public Function Initialize(userId As String) As Task(Of IList(Of Team))
  overload: Messenger.Core.Services.MessengerService.Initialize*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Core.Services.MessengerService.RegisterListenerForMessages(System.EventHandler{Messenger.Core.Models.Message})
  commentId: M:Messenger.Core.Services.MessengerService.RegisterListenerForMessages(System.EventHandler{Messenger.Core.Models.Message})
  id: RegisterListenerForMessages(System.EventHandler{Messenger.Core.Models.Message})
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: RegisterListenerForMessages(EventHandler<Message>)
  nameWithType: MessengerService.RegisterListenerForMessages(EventHandler<Message>)
  fullName: Messenger.Core.Services.MessengerService.RegisterListenerForMessages(System.EventHandler<Messenger.Core.Models.Message>)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: RegisterListenerForMessages
    path: Services/MessengerService.cs
    startLine: 82
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nRegisters the action from the view model to signal-r event\n"
  example: []
  syntax:
    content: public void RegisterListenerForMessages(EventHandler<Message> onMessageReceived)
    parameters:
    - id: onMessageReceived
      type: System.EventHandler{Messenger.Core.Models.Message}
      description: Action to run upon receiving a message
    content.vb: Public Sub RegisterListenerForMessages(onMessageReceived As EventHandler(Of Message))
  overload: Messenger.Core.Services.MessengerService.RegisterListenerForMessages*
  nameWithType.vb: MessengerService.RegisterListenerForMessages(EventHandler(Of Message))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Messenger.Core.Services.MessengerService.RegisterListenerForMessages(System.EventHandler(Of Messenger.Core.Models.Message))
  name.vb: RegisterListenerForMessages(EventHandler(Of Message))
- uid: Messenger.Core.Services.MessengerService.RegisterListenerForInvites(System.EventHandler{System.UInt32})
  commentId: M:Messenger.Core.Services.MessengerService.RegisterListenerForInvites(System.EventHandler{System.UInt32})
  id: RegisterListenerForInvites(System.EventHandler{System.UInt32})
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: RegisterListenerForInvites(EventHandler<UInt32>)
  nameWithType: MessengerService.RegisterListenerForInvites(EventHandler<UInt32>)
  fullName: Messenger.Core.Services.MessengerService.RegisterListenerForInvites(System.EventHandler<System.UInt32>)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: RegisterListenerForInvites
    path: Services/MessengerService.cs
    startLine: 87
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  syntax:
    content: public void RegisterListenerForInvites(EventHandler<uint> onInviteReceived)
    parameters:
    - id: onInviteReceived
      type: System.EventHandler{System.UInt32}
    content.vb: Public Sub RegisterListenerForInvites(onInviteReceived As EventHandler(Of UInteger))
  overload: Messenger.Core.Services.MessengerService.RegisterListenerForInvites*
  nameWithType.vb: MessengerService.RegisterListenerForInvites(EventHandler(Of UInt32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Messenger.Core.Services.MessengerService.RegisterListenerForInvites(System.EventHandler(Of System.UInt32))
  name.vb: RegisterListenerForInvites(EventHandler(Of UInt32))
- uid: Messenger.Core.Services.MessengerService.SendMessage(Messenger.Core.Models.Message,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Messenger.Core.Services.MessengerService.SendMessage(Messenger.Core.Models.Message,System.Collections.Generic.IEnumerable{System.String})
  id: SendMessage(Messenger.Core.Models.Message,System.Collections.Generic.IEnumerable{System.String})
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: SendMessage(Message, IEnumerable<String>)
  nameWithType: MessengerService.SendMessage(Message, IEnumerable<String>)
  fullName: Messenger.Core.Services.MessengerService.SendMessage(Messenger.Core.Models.Message, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: SendMessage
    path: Services/MessengerService.cs
    startLine: 102
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nSaves the message to the database and simultaneously broadcasts to the connected Signal-R hub\n"
  example: []
  syntax:
    content: public async Task<bool> SendMessage(Message message, IEnumerable<string> attachmentFilePaths = null)
    parameters:
    - id: message
      type: Messenger.Core.Models.Message
      description: A complete message object to send
    - id: attachmentFilePaths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: An Enumerable of paths of files to attach to the message
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true on success, false on invalid message (error will be handled in each service)
    content.vb: Public Function SendMessage(message As Message, attachmentFilePaths As IEnumerable(Of String) = Nothing) As Task(Of Boolean)
  overload: Messenger.Core.Services.MessengerService.SendMessage*
  nameWithType.vb: MessengerService.SendMessage(Message, IEnumerable(Of String))
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: Messenger.Core.Services.MessengerService.SendMessage(Messenger.Core.Models.Message, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendMessage(Message, IEnumerable(Of String))
- uid: Messenger.Core.Services.MessengerService.CreateTeam(System.String,System.String,System.String)
  commentId: M:Messenger.Core.Services.MessengerService.CreateTeam(System.String,System.String,System.String)
  id: CreateTeam(System.String,System.String,System.String)
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: CreateTeam(String, String, String)
  nameWithType: MessengerService.CreateTeam(String, String, String)
  fullName: Messenger.Core.Services.MessengerService.CreateTeam(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: CreateTeam
    path: Services/MessengerService.cs
    startLine: 150
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nSaves new team to database and join the hub group of the team\n"
  example: []
  syntax:
    content: public async Task<bool> CreateTeam(string creatorId, string teamName, string teamDescription = "")
    parameters:
    - id: creatorId
      type: System.String
      description: Creator user id
    - id: teamName
      type: System.String
      description: Name of the team
    - id: teamDescription
      type: System.String
      description: Description of the team(optional)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true on success, false on invalid message (error will be handled in each service)
    content.vb: Public Function CreateTeam(creatorId As String, teamName As String, teamDescription As String = "") As Task(Of Boolean)
  overload: Messenger.Core.Services.MessengerService.CreateTeam*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Core.Services.MessengerService.InviteUser(System.String,System.UInt32)
  commentId: M:Messenger.Core.Services.MessengerService.InviteUser(System.String,System.UInt32)
  id: InviteUser(System.String,System.UInt32)
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: InviteUser(String, UInt32)
  nameWithType: MessengerService.InviteUser(String, UInt32)
  fullName: Messenger.Core.Services.MessengerService.InviteUser(System.String, System.UInt32)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: InviteUser
    path: Services/MessengerService.cs
    startLine: 185
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nSaves new membership to database and add the user to the hub group of the team\n"
  example: []
  syntax:
    content: public async Task<bool> InviteUser(string userId, uint teamId)
    parameters:
    - id: userId
      type: System.String
      description: User id to add
    - id: teamId
      type: System.UInt32
      description: Id of the team to add the user to
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true on success, false on invalid message (error will be handled in each service)
    content.vb: Public Function InviteUser(userId As String, teamId As UInteger) As Task(Of Boolean)
  overload: Messenger.Core.Services.MessengerService.InviteUser*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Core.Services.MessengerService.LoadTeams(System.String)
  commentId: M:Messenger.Core.Services.MessengerService.LoadTeams(System.String)
  id: LoadTeams(System.String)
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: LoadTeams(String)
  nameWithType: MessengerService.LoadTeams(String)
  fullName: Messenger.Core.Services.MessengerService.LoadTeams(System.String)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: LoadTeams
    path: Services/MessengerService.cs
    startLine: 216
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nLoad all teams the current user has membership of\n"
  example: []
  syntax:
    content: public async Task<IEnumerable<Team>> LoadTeams(string userId)
    parameters:
    - id: userId
      type: System.String
      description: Current user id
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Team}}
      description: List of teams
    content.vb: Public Function LoadTeams(userId As String) As Task(Of IEnumerable(Of Team))
  overload: Messenger.Core.Services.MessengerService.LoadTeams*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Core.Services.MessengerService.GetTeam(System.UInt32)
  commentId: M:Messenger.Core.Services.MessengerService.GetTeam(System.UInt32)
  id: GetTeam(System.UInt32)
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: GetTeam(UInt32)
  nameWithType: MessengerService.GetTeam(UInt32)
  fullName: Messenger.Core.Services.MessengerService.GetTeam(System.UInt32)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: GetTeam
    path: Services/MessengerService.cs
    startLine: 226
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nGets the team with the given team id\n"
  example: []
  syntax:
    content: public async Task<Team> GetTeam(uint teamId)
    parameters:
    - id: teamId
      type: System.UInt32
      description: Id of the team to retrieve
    return:
      type: System.Threading.Tasks.Task{Messenger.Core.Models.Team}
      description: A complete Team object
    content.vb: Public Function GetTeam(teamId As UInteger) As Task(Of Team)
  overload: Messenger.Core.Services.MessengerService.GetTeam*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: Messenger.Core.Services.MessengerService.LoadMessages(System.UInt32)
  commentId: M:Messenger.Core.Services.MessengerService.LoadMessages(System.UInt32)
  id: LoadMessages(System.UInt32)
  parent: Messenger.Core.Services.MessengerService
  langs:
  - csharp
  - vb
  name: LoadMessages(UInt32)
  nameWithType: MessengerService.LoadMessages(UInt32)
  fullName: Messenger.Core.Services.MessengerService.LoadMessages(System.UInt32)
  type: Method
  source:
    remote:
      path: Messenger/Messenger.Core/Services/MessengerService.cs
      branch: unstable
      repo: https://github.com/JonasMuehlmann/BIB_VPR.git
    id: LoadMessages
    path: Services/MessengerService.cs
    startLine: 236
  assemblies:
  - Messenger.Core
  namespace: Messenger.Core.Services
  summary: "\nLoad all messages of the team\n"
  example: []
  syntax:
    content: public async Task<IEnumerable<Message>> LoadMessages(uint teamId)
    parameters:
    - id: teamId
      type: System.UInt32
      description: Id of the team to load messsages from
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
      description: List of messages
    content.vb: Public Function LoadMessages(teamId As UInteger) As Task(Of IEnumerable(Of Message))
  overload: Messenger.Core.Services.MessengerService.LoadMessages*
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
references:
- uid: Messenger.Core.Services
  commentId: N:Messenger.Core.Services
  name: Messenger.Core.Services
  nameWithType: Messenger.Core.Services
  fullName: Messenger.Core.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Messenger.Core.Services.MessengerService.logger*
  commentId: Overload:Messenger.Core.Services.MessengerService.logger
  name: logger
  nameWithType: MessengerService.logger
  fullName: Messenger.Core.Services.MessengerService.logger
- uid: Serilog.ILogger
  commentId: T:Serilog.ILogger
  parent: Serilog
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Serilog.ILogger
- uid: Serilog
  commentId: N:Serilog
  isExternal: true
  name: Serilog
  nameWithType: Serilog
  fullName: Serilog
- uid: Messenger.Core.Services.MessengerService.Initialize*
  commentId: Overload:Messenger.Core.Services.MessengerService.Initialize
  name: Initialize
  nameWithType: MessengerService.Initialize
  fullName: Messenger.Core.Services.MessengerService.Initialize
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Messenger.Core.Models.Team}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Messenger.Core.Models.Team}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Team>>
  nameWithType: Task<IList<Team>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Messenger.Core.Models.Team>>
  nameWithType.vb: Task(Of IList(Of Team))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Messenger.Core.Models.Team))
  name.vb: Task(Of IList(Of Team))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Messenger.Core.Services.MessengerService.RegisterListenerForMessages*
  commentId: Overload:Messenger.Core.Services.MessengerService.RegisterListenerForMessages
  name: RegisterListenerForMessages
  nameWithType: MessengerService.RegisterListenerForMessages
  fullName: Messenger.Core.Services.MessengerService.RegisterListenerForMessages
- uid: System.EventHandler{Messenger.Core.Models.Message}
  commentId: T:System.EventHandler{Messenger.Core.Models.Message}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<Message>
  nameWithType: EventHandler<Message>
  fullName: System.EventHandler<Messenger.Core.Models.Message>
  nameWithType.vb: EventHandler(Of Message)
  fullName.vb: System.EventHandler(Of Messenger.Core.Models.Message)
  name.vb: EventHandler(Of Message)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Core.Services.MessengerService.RegisterListenerForInvites*
  commentId: Overload:Messenger.Core.Services.MessengerService.RegisterListenerForInvites
  name: RegisterListenerForInvites
  nameWithType: MessengerService.RegisterListenerForInvites
  fullName: Messenger.Core.Services.MessengerService.RegisterListenerForInvites
- uid: System.EventHandler{System.UInt32}
  commentId: T:System.EventHandler{System.UInt32}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<UInt32>
  nameWithType: EventHandler<UInt32>
  fullName: System.EventHandler<System.UInt32>
  nameWithType.vb: EventHandler(Of UInt32)
  fullName.vb: System.EventHandler(Of System.UInt32)
  name.vb: EventHandler(Of UInt32)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Core.Services.MessengerService.SendMessage*
  commentId: Overload:Messenger.Core.Services.MessengerService.SendMessage
  name: SendMessage
  nameWithType: MessengerService.SendMessage
  fullName: Messenger.Core.Services.MessengerService.SendMessage
- uid: Messenger.Core.Models.Message
  commentId: T:Messenger.Core.Models.Message
  parent: Messenger.Core.Models
  name: Message
  nameWithType: Message
  fullName: Messenger.Core.Models.Message
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Core.Models
  commentId: N:Messenger.Core.Models
  name: Messenger.Core.Models
  nameWithType: Messenger.Core.Models
  fullName: Messenger.Core.Models
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Messenger.Core.Services.MessengerService.CreateTeam*
  commentId: Overload:Messenger.Core.Services.MessengerService.CreateTeam
  name: CreateTeam
  nameWithType: MessengerService.CreateTeam
  fullName: Messenger.Core.Services.MessengerService.CreateTeam
- uid: Messenger.Core.Services.MessengerService.InviteUser*
  commentId: Overload:Messenger.Core.Services.MessengerService.InviteUser
  name: InviteUser
  nameWithType: MessengerService.InviteUser
  fullName: Messenger.Core.Services.MessengerService.InviteUser
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Messenger.Core.Services.MessengerService.LoadTeams*
  commentId: Overload:Messenger.Core.Services.MessengerService.LoadTeams
  name: LoadTeams
  nameWithType: MessengerService.LoadTeams
  fullName: Messenger.Core.Services.MessengerService.LoadTeams
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Team}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Team}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<Team>>
  nameWithType: Task<IEnumerable<Team>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Messenger.Core.Models.Team>>
  nameWithType.vb: Task(Of IEnumerable(Of Team))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Messenger.Core.Models.Team))
  name.vb: Task(Of IEnumerable(Of Team))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Core.Services.MessengerService.GetTeam*
  commentId: Overload:Messenger.Core.Services.MessengerService.GetTeam
  name: GetTeam
  nameWithType: MessengerService.GetTeam
  fullName: Messenger.Core.Services.MessengerService.GetTeam
- uid: System.Threading.Tasks.Task{Messenger.Core.Models.Team}
  commentId: T:System.Threading.Tasks.Task{Messenger.Core.Models.Team}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Team>
  nameWithType: Task<Team>
  fullName: System.Threading.Tasks.Task<Messenger.Core.Models.Team>
  nameWithType.vb: Task(Of Team)
  fullName.vb: System.Threading.Tasks.Task(Of Messenger.Core.Models.Team)
  name.vb: Task(Of Team)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Team
    name: Team
    nameWithType: Team
    fullName: Messenger.Core.Models.Team
  - name: )
    nameWithType: )
    fullName: )
- uid: Messenger.Core.Services.MessengerService.LoadMessages*
  commentId: Overload:Messenger.Core.Services.MessengerService.LoadMessages
  name: LoadMessages
  nameWithType: MessengerService.LoadMessages
  fullName: Messenger.Core.Services.MessengerService.LoadMessages
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Messenger.Core.Models.Message}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<Message>>
  nameWithType: Task<IEnumerable<Message>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Messenger.Core.Models.Message>>
  nameWithType.vb: Task(Of IEnumerable(Of Message))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Messenger.Core.Models.Message))
  name.vb: Task(Of IEnumerable(Of Message))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Messenger.Core.Models.Message
    name: Message
    nameWithType: Message
    fullName: Messenger.Core.Models.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
